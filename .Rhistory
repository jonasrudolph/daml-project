# Erstellung des Boxplots für Expats und Einheimische
ggplot(filtered_data, aes(x = as.factor(Expat), y = Salary, fill = factor(Expat))) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Vergleich der Gehälter von Expats und Einheimischen",
x = "Expat",
y = "Gehalt") +
scale_x_discrete(labels = c("Einheimische (0)", "Expats (1)")) +
theme_minimal()
# Diagramm erstellen
ggplot(salary_percentiles_long, aes(x = Education.Level, y = Salary, fill = Percentile)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Perzentile des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt",
fill = "Perzentil") +
theme_minimal()
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(fill = "lightblue", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(fill = "lightblue", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(fill = "lightblue", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black", fill = viridis(2)[1]) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black", fill = viridis(1)[1]) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black", fill = viridis(3)[1]) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black", fill = viridis(4)[1]) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black", fill = viridis(2)[2]) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Scatterplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_point() +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Gehalt nach Bildungslevel",
x = "Bildungslevel",
y = "Gehalt") +
theme_minimal()
# Liniendiagramm mit umgekehrter Reihenfolge des Bildungsniveaus erstellen
ggplot(filtered_data, aes(x = Education.Level, y = Salary, group = 1)) +
geom_line() +
scale_fill_viridis(discrete = TRUE) +
stat_summary(fun.y = median, geom = "point", size = 3, color = "red") +
labs(title = "Gehalt nach Bildungslevel",
x = "Bildungslevel",
y = "Gehalt") +
theme_minimal()
scale_fill_viridis(discrete = TRUE) +
# Bildungslevel neu ordnen
filtered_data$Education.Level <- factor(filtered_data$Education.Level, levels = c("0", "1", "2", "3"))
# Bildungslevel neu ordnen
filtered_data$Education.Level <- factor(filtered_data$Education.Level, levels = c("0", "1", "2", "3"))
# Liniendiagramm mit umgekehrter Reihenfolge des Bildungsniveaus erstellen
ggplot(filtered_data, aes(x = Education.Level, y = Salary, group = 1)) +
geom_line() +
stat_summary(fun.y = median, geom = "point", size = 3, color = "red") +
labs(title = "Gehalt nach Bildungslevel",
x = "Bildungslevel",
y = "Gehalt") +
theme_minimal()
# Erstellung des Diagramms mit angepasster Achsenbeschriftung
ggplot(all_average_salaries, aes(x = Job.Type, y = Average.Salary, fill = Job.Type)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Durchschnittliche Gehälter nach Jobtyp",
x = "Jobtyp",
y = "Durchschnittliches Gehalt") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Verwendung von scales::comma für die Achsenbeschriftung in Tausenden
#Balkendiagramm erstellen
ggplot(summary_data, aes(x = Education.Level, y = Salary, fill = Country)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Median Gehalt nach Bildungslevel und Land",
x = "Bildungslevel",
y = "Median Gehalt",
fill = "Land") +
theme_minimal()
# Filtern der Daten für Jobs mit spezifischen Schlüsselwörtern im Jobtitel
filtered_data3 <- filtered_data %>%
filter(grepl("Data|Software|Developer|Engineer", Job.Title))
# Anzeigen aller eindeutigen Jobtitel und deren Häufigkeit in filtered_data3
job_title_count <- table(filtered_data3$Job.Title)
job_title_df <- data.frame(Job_Title = names(job_title_count), Frequency = as.numeric(job_title_count))
# Anzeige des Dataframes mit den Jobtiteln und deren Häufigkeit
job_title_df
# Filtern der Daten für Jobs ohne "Director" im Jobtitel
filtered_data3 <- filtered_data3 %>%
filter(!grepl("Director|Manager", Job.Title))
# Anzeigen aller eindeutigen Jobtitel und deren Häufigkeit in filtered_data3
job_title_count <- table(filtered_data3$Job.Title)
job_title_df <- data.frame(Job_Title = names(job_title_count), Frequency = as.numeric(job_title_count))
# Anzeige des Dataframes mit den Jobtiteln und deren Häufigkeit
job_title_df
# Laden des dplyr-Pakets
library(dplyr)
# Berechnung der Quartile der Berufserfahrung
filtered_data4 <- filtered_data3 %>%
mutate(Experience_Quartile = ntile(Years.Of.Experience, 4))
# Balkendiagramm für data_job im Vergleich zum Gehalt
ggplot(filtered_data4, aes(x = factor(data_job), y = Salary)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", fill = "skyblue") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Gehalt nach Data Job",
x = "Data Job",
y = "Gehalt (Mittelwert)")
# Laden des dplyr-Pakets
library(dplyr)
# Berechnung der Quartile der Berufserfahrung
filtered_data4 <- filtered_data3 %>%
mutate(Experience_Quartile = ntile(Years.Of.Experience, 4))
# Balkendiagramm für data_job im Vergleich zum Gehalt
ggplot(filtered_data4, aes(x = factor(data_job), y = Salary)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", fill = "skyblue") +
labs(title = "Gehalt nach Data Job",
x = "Data Job",
y = "Gehalt (Mittelwert)")
# Erstellung des Balkendiagramms
ggplot(filtered_data4, aes(y = Salary, x = factor(Experience_Quartile))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = factor(data_job))) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Quartile der Berufserfahrung nach Gehalt und Jobtyp",
x = "Quartile der Berufserfahrung",
y = "Gehalt") +
theme_minimal()
# Erstellung des Balkendiagramms
ggplot(filtered_data4, aes(y = Salary, x = factor(Experience_Quartile))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = factor(data_job))) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Quartile der Berufserfahrung nach Gehalt und Jobtyp",
x = "Quartile der Berufserfahrung",
y = "Gehalt") +
theme_minimal()
# Laden des dplyr-Pakets
library(dplyr)
# Berechnung der Quartile der Berufserfahrung
filtered_data4 <- filtered_data3 %>%
mutate(Experience_Quartile = ntile(Years.Of.Experience, 4))
# Balkendiagramm für data_job im Vergleich zum Gehalt
ggplot(filtered_data4, aes(x = factor(data_job), y = Salary)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", fill = viridis(2)[1]) +
labs(title = "Gehalt nach Data Job",
x = "Data Job",
y = "Gehalt (Mittelwert)")
# Laden des dplyr-Pakets
library(dplyr)
# Berechnung der Quartile der Berufserfahrung
filtered_data4 <- filtered_data3 %>%
mutate(Experience_Quartile = ntile(Years.Of.Experience, 4))
# Balkendiagramm für data_job im Vergleich zum Gehalt
ggplot(filtered_data4, aes(x = factor(data_job), y = Salary)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", fill = "skyblue") +
labs(title = "Gehalt nach Data Job",
x = "Data Job",
y = "Gehalt (Mittelwert)")
# Zählen der Anzahl von 0 und 1 in der Spalte data_job
count_0 <- sum(filtered_data3$data_job == 0, na.rm = TRUE)
count_1 <- sum(filtered_data3$data_job == 1, na.rm = TRUE)
# Ausgabe der Anzahl von 0 und 1
cat("Anzahl der Zeilen mit dem Wert 0 bei data_job (Data Scientists & Engineers):", count_0, "\n")
cat("Anzahl der Zeilen mit dem Wert 1 bei data_job (Software Engineers & Co):", count_1, "\n")
# Erstellen der neuen Spalte 'data_job'
filtered_data3 <- filtered_data3 %>%
mutate(data_job = ifelse(grepl("Data", Job.Title), 1, 0))
# Berechnung der Quartile der Berufserfahrung
filtered_data4 <- filtered_data3 %>%
mutate(Experience_Quartile = ntile(Years.Of.Experience, 4))
# Balkendiagramm für data_job im Vergleich zum Gehalt
ggplot(filtered_data4, aes(x = factor(data_job), y = Salary)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", fill = "skyblue") +
labs(title = "Gehalt nach Data Job",
x = "Data Job",
y = "Gehalt (Mittelwert)")
# Berechnung der Quartile der Berufserfahrung
filtered_data4 <- filtered_data3 %>%
mutate(Experience_Quartile = ntile(Years.Of.Experience, 4))
# Balkendiagramm für data_job im Vergleich zum Gehalt
ggplot(filtered_data4, aes(x = factor(data_job), y = Salary)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", fill = viridis(2)[1]) +
labs(title = "Gehalt nach Data Job",
x = "Data Job",
y = "Gehalt (Mittelwert)")
# Erstellung des Balkendiagramms
ggplot(filtered_data4, aes(y = Salary, x = factor(Experience_Quartile))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = factor(data_job))) +
labs(title = "Quartile der Berufserfahrung nach Gehalt und Jobtyp",
x = "Quartile der Berufserfahrung",
y = "Gehalt") +
theme_minimal() +
scale_fill_viridis(discrete = TRUE)
# Erstellung des Balkendiagramms
ggplot(filtered_data4, aes(y = Salary, x = factor(Experience_Quartile))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = factor(data_job))) +
labs(title = "Quartile der Berufserfahrung nach Gehalt und Jobtyp",
x = "Quartile der Berufserfahrung",
y = "Gehalt") +
theme_minimal() +
scale_fill_viridis(discrete = TRUE)
# Erstellung des Balkendiagramms für Education Level
ggplot(filtered_data4, aes(y = Salary, x = factor(Education.Level))) +
geom_bar(stat = "identity", position = "dodge", aes(fill = factor(data_job))) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Quartile des Bildungsniveaus nach Gehalt und Jobtyp",
x = "Quartile des Bildungsniveaus",
y = "Gehalt") +
theme_minimal()
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE))
# Ausgabe der Mittelwerte nach Land
mean_salaries_by_country
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE),
BIP_Per_Person = first(BIP_Per_Person))  # Annahme: BIP-Pro-Person-Werte sind konstant für jedes Land
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE),
BIP_Per_Person = first(BIP_Per_Person))  # Annahme: BIP-Pro-Person-Werte sind konstant für jedes Land
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE))
# Ausgabe der Mittelwerte nach Land
mean_salaries_by_country
# Erstelle eine neue Spalte "BIP_Per_Person" mit NA-Werten
filtered_data3$BIP_Per_Person <- NA
# Weise den genannten Ländern die entsprechenden BIP-Werte zu
filtered_data3$BIP_Per_Person[filtered_data3$Country == "Australia"] <- 64813.85
filtered_data3$BIP_Per_Person[filtered_data3$Country == "Canada"] <- 53246.98
filtered_data3$BIP_Per_Person[filtered_data3$Country == "China"] <- 12541.40
filtered_data3$BIP_Per_Person[filtered_data3$Country == "UK"] <- 48912.78
filtered_data3$BIP_Per_Person[filtered_data3$Country == "USA"] <- 76343.00
head(filtered_data3)
# Erstelle eine neue Spalte "BIP_Per_Person" mit NA-Werten
filtered_data3$BIP_Per_Person <- NA
# Weise den genannten Ländern die entsprechenden BIP-Werte zu
filtered_data3$BIP_Per_Person[filtered_data3$Country == "Australia"] <- 64813.85
filtered_data3$BIP_Per_Person[filtered_data3$Country == "Canada"] <- 53246.98
filtered_data3$BIP_Per_Person[filtered_data3$Country == "China"] <- 12541.40
filtered_data3$BIP_Per_Person[filtered_data3$Country == "UK"] <- 48912.78
filtered_data3$BIP_Per_Person[filtered_data3$Country == "USA"] <- 76343.00
# Scatterplot mit Farbgebung nach Ländern und Mittelwerten einzeichnen
ggplot(filtered_data3, aes(x = BIP_Per_Person, y = Salary, color = Country)) +
geom_point() +
stat_summary(fun = mean, geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Vergleich von Gehalt und BIP pro Person nach Ländern",
x = "BIP pro Person",
y = "Gehalt",
color = "Land")
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE),
BIP_Per_Person = first(BIP_Per_Person))  # Annahme: BIP-Pro-Person-Werte sind konstant für jedes Land
# Ausgabe der Mittelwerte nach Land mit BIP pro Person
mean_salaries_by_country
cor(filtered_data3$Salary, filtered_data3$BIP_Per_Person, use = "complete.obs")
# Erstellen des neuen Datensatzes ohne Einträge für China
filtered_data3_no_china <- filtered_data3 %>% filter(Country != "China")
cor(filtered_data3_no_china$Salary, filtered_data3_no_china$BIP_Per_Person, use = "complete.obs")
# Erstellen des neuen Datensatzes ohne Einträge für China
filtered_data3_no_china <- filtered_data3 %>% filter(Country != "China")
# Erstellen des neuen Datensatzes ohne Einträge für China
filtered_data3_no_china <- filtered_data3 %>% filter(Country != "China")
cor(filtered_data3_no_china$Salary, filtered_data3_no_china$BIP_Per_Person, use = "complete.obs")
# Anzahl der Datensätze mit dem Land "China" im Datensatz filtered_data3_no_china
count_china <- filtered_data3_no_china %>% filter(Country == "China") %>% nrow()
count_china
# Z-Skalierung der Variable "Years.Of.Experience"
filtered_data3_z <- filtered_data3
filtered_data3_z$Years.Of.Experience <- scale(filtered_data3$Years.Of.Experience)
# Lineare Regression von "Salary" basierend auf "Years.Of.Experience"
lm_model <- lm(Salary ~ Years.Of.Experience, data = filtered_data3_z)
# Zusammenfassung der Regression
summary(lm_model)
#Scatterplot mit der Regressionslinie
ggplot(filtered_data3_z, aes(x = Years.Of.Experience, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Lineare Regression von Salary und Years of Experience (Z-Scale)",
x = "Years of Experience (Z-Scale)",
y = "Salary")
#Scatterplot mit der Regressionslinie
ggplot(filtered_data3_z, aes(x = Years.Of.Experience, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
scale_fill_viridis(discrete = TRUE)
labs(title = "Lineare Regression von Salary und Years of Experience (Z-Scale)",
x = "Years of Experience (Z-Scale)",
y = "Salary")
#Scatterplot mit der Regressionslinie
ggplot(filtered_data3_z, aes(x = Years.Of.Experience, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
scale_fill_viridis(discrete = TRUE)
labs(title = "Lineare Regression von Salary und Years of Experience (Z-Scale)",
x = "Years of Experience (Z-Scale)",
y = "Salary")
ggplot(salary_final, aes(x = Education.Level, y = Salary)) +
geom_point(color = viridis(2)[1], size = 3, shape = 16) +
labs(title = "Scatter Plot of Education Level vs Salary",
x = "Years of Experience",
y = "Salary")
ggplot(salary_final, aes(x = Job.Title, y = Salary)) +
geom_bar(stat = "summary", fun = "mean", fill = "blue", color = viridis(2)[1]) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Average Salary by Job Title",
x = "Job Title",
y = "Average Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(salary_final, aes(x = Job.Title, y = Salary)) +
geom_bar(stat = "summary", fun = "mean", color = viridis(2)[1], color = viridis(2)[1]) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Average Salary by Job Title",
x = "Job Title",
y = "Average Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
job_title_count <- table(salary_final$Job.Title)
job_title_df <- data.frame(Job_Title = names(job_title_count), Frequency = as.numeric(job_title_count))
ggplot(job_title_df, aes(x = Job_Title, y = Frequency)) +
geom_bar(stat = "identity", fill = viridis(2)[1], color = "black") +
labs(title = "Frequency of Unique Job Titles",
x = "Job Titles",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
job_title_count <- table(filtered_data$Job.Title)
job_title_df <- data.frame(Job_Title = names(job_title_count), Frequency = as.numeric(job_title_count))
ggplot(job_title_df, aes(x = Job_Title, y = Frequency)) +
geom_bar(stat = "identity", fill = viridis(2)[1], color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Frequency of Unique Job Titles",
x = "Job Titles",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Scatterplot mit der Regressionslinie
ggplot(filtered_data3_z, aes(x = Years.Of.Experience, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = viridis(2)[1]) +
scale_fill_viridis(discrete = TRUE)
labs(title = "Lineare Regression von Salary und Years of Experience (Z-Scale)",
x = "Years of Experience (Z-Scale)",
y = "Salary")
# Erstelle eine Histogramm-Visualisierung der Altersverteilung
ggplot(salary, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.8) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
#| message: false
library(tidyverse)
library(tidymodels)
# zum Plotten der Korrelationsmatrix
library(corrplot)
# für Verwendung der vif-Funktion
library(car)
# Nur für 3D-Plot erforderlich
library(plotly)
#Um Plots nebeneinander anzuordnen
library(patchwork)
#für QQ und PP-Plots
library(qqplotr)
# Generate data
mydata <- tibble(ID = c(1:12),
Periode = c(1,2,3,4,5,6,7,8,9,10,11,12),
Absatz = c(2596,2709,2552,3004,3076,2513,2626,3120,2751,2965,2818,3171),
Werbung = c(203,216,207,250,240,226,246,250,235,256,242,251),
Preis = c(1.42,1.41,1.95,1.99,1.63,1.82,1.69,1.65,1.99,1.53,1.69,1.72),
Verkauf = c(150,120,146,270,200,93,70,230,166,116,100,216))
mydata
summary(mydata)
sd(mydata$Absatz)
sd(mydata$Werbung)
sd(mydata$Preis)
cor(mydata)
mydata |>
select(-ID, -Periode) |>
cor() |>
corrplot(method = 'ellipse')
# Modell initialisieren
lm_model <- linear_reg() |> set_engine("lm")
summary <- lm_fit |> extract_fit_engine() |> summary()
#| message: false
library(tidyverse)
library(tidymodels)
# zum Plotten der Korrelationsmatrix
library(corrplot)
# für Verwendung der vif-Funktion
library(car)
# Nur für 3D-Plot erforderlich
library(plotly)
#Um Plots nebeneinander anzuordnen
library(patchwork)
#für QQ und PP-Plots
library(qqplotr)
# Generate data
mydata <- tibble(ID = c(1:12),
Periode = c(1,2,3,4,5,6,7,8,9,10,11,12),
Absatz = c(2596,2709,2552,3004,3076,2513,2626,3120,2751,2965,2818,3171),
Werbung = c(203,216,207,250,240,226,246,250,235,256,242,251),
Preis = c(1.42,1.41,1.95,1.99,1.63,1.82,1.69,1.65,1.99,1.53,1.69,1.72),
Verkauf = c(150,120,146,270,200,93,70,230,166,116,100,216))
mydata
summary(mydata)
sd(mydata$Absatz)
sd(mydata$Werbung)
sd(mydata$Preis)
cor(mydata)
mydata |>
select(-ID, -Periode) |>
cor() |>
corrplot(method = 'ellipse')
# Modell initialisieren
lm_model <- linear_reg() |> set_engine("lm")
summary <- lm_fit |> extract_fit_engine() |> summary()
# Z-Skalierung der Variable "Years.Of.Experience"
filtered_data3_z <- filtered_data3
filtered_data3_z$Years.Of.Experience <- scale(filtered_data3$Years.Of.Experience)
# Lineare Regression von "Salary" basierend auf "Years.Of.Experience"
lm_model <- lm(Salary ~ Years.Of.Experience, data = filtered_data3_z)
# Zusammenfassung der Regression
summary(lm_model)
#Scatterplot mit der Regressionslinie
ggplot(filtered_data3_z, aes(x = Years.Of.Experience, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = viridis(2)[1]) +
scale_fill_viridis(discrete = TRUE)
labs(title = "Lineare Regression von Salary und Years of Experience (Z-Scale)",
x = "Years of Experience (Z-Scale)",
y = "Salary")
# Scatterplot mit Farbgebung nach Ländern und Mittelwerten einzeichnen
ggplot(filtered_data3, aes(x = BIP_Per_Person, y = Salary, color = Country)) +
geom_point() +
stat_summary(fun = mean, geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Vergleich von Gehalt und BIP pro Person nach Ländern",
x = "BIP pro Person",
y = "Gehalt",
color = "Land") +
scale_color_viridis(discrete = TRUE)
