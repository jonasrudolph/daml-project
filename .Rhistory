filtered_data3$BIP_Per_Person[filtered_data3$Country == "China"] <- 12541.40
filtered_data3$BIP_Per_Person[filtered_data3$Country == "UK"] <- 48912.78
filtered_data3$BIP_Per_Person[filtered_data3$Country == "USA"] <- 76343.00
head(filtered_data3)
# Scatterplot mit Farbgebung nach Ländern und Mittelwerten einzeichnen
ggplot(filtered_data3, aes(x = BIP_Per_Person, y = Salary, color = Country)) +
geom_point() +
stat_summary(fun = mean, geom = "point", shape = 23, size = 3, fill = "black") +
labs(title = "Vergleich von Gehalt und BIP pro Person nach Ländern",
x = "BIP pro Person",
y = "Gehalt",
color = "Land") +
scale_color_viridis(discrete = TRUE)
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE))
# Ausgabe der Mittelwerte nach Land
mean_salaries_by_country
# Berechnung der Mittelwerte nach Land
mean_salaries_by_country <- filtered_data3 %>%
group_by(Country) %>%
summarise(mean_salary = mean(Salary, na.rm = TRUE),
BIP_Per_Person = first(BIP_Per_Person))  # Annahme: BIP-Pro-Person-Werte sind konstant für jedes Land
# Ausgabe der Mittelwerte nach Land mit BIP pro Person
mean_salaries_by_country
cor(filtered_data3$Salary, filtered_data3$BIP_Per_Person, use = "complete.obs")
# Erstellen des neuen Datensatzes ohne Einträge für China
filtered_data3_no_china <- filtered_data3 %>% filter(Country != "China")
cor(filtered_data3_no_china$Salary, filtered_data3_no_china$BIP_Per_Person, use = "complete.obs")
# Anzahl der Datensätze mit dem Land "China" im Datensatz filtered_data3_no_china
count_china <- filtered_data3_no_china %>% filter(Country == "China") %>% nrow()
count_china
filtered_data3 %>%
ggplot() +
aes(x = Salary, y = Years.Of.Experience) +
geom_point(aes(color = Salary), alpha = 0.8) +
geom_smooth(method = lm, color = "orange") +
scale_color_viridis(option = "D")
# Nur 'Salary' und 'Years.Of.Experience' behalten und den Rest entfernen
filtered_data5 <- filtered_data3 %>%
select(Salary, Years.Of.Experience)
# Z-Skalierung der Variable "Years.Of.Experience"
filtered_data5_z <- filtered_data5
filtered_data5_z$Years.Of.Experience <- scale(filtered_data5$Years.Of.Experience)
summary(filtered_data5_z)
sd(filtered_data5_z$Years.Of.Experience)
set.seed(007)
filtered_data5_z <- initial_split(filtered_data5_z, prop = 0.8, strata = Years.Of.Experience)
fd5_train <- training(filtered_data5_z)
fd5_test <- testing(filtered_data5_z)
# Modell initialisieren
lm_model <- linear_reg() |> set_engine("lm")
# Lineare Regression von "Salary" basierend auf "Years.Of.Experience"
lm_fit <- lm_model |> fit(Salary ~ Years.Of.Experience, data = fd5_train)
# Zusammenfassung der Regression
summary <- lm_fit |> extract_fit_engine() |> summary()
summary
pred_train <- predict(lm_fit, new_data = fd5_train) |> rename("pred_train" = ".pred")
pred_test <- predict(lm_fit, new_data = fd5_test) |>  rename("pred_test" = ".pred")
compare_train <- fd5_train |>
select(Salary) |>
bind_cols(pred_train)
head(compare_train)
compare_test <- fd5_test |>
select(Salary) |>
bind_cols(pred_test)
head(compare_test)
library(ggplot2)
# Anpassung der Länge von pred_train an pred_test
pred_train_shortened <- head(pred_train, nrow(pred_test))
# Correlation Matrix erstellen
cor_matrix <- cor(bind_cols(compare_train, compare_test, filtered_data5))
# Reduziere die Anzahl der Zeilen auf 634
filtered_data5_shortened <- slice(filtered_data5, 1:634)
filtered_data5_shortened |>
select(Years.Of.Experience, Salary) |>
bind_cols(pred_test) |>
ggplot(aes(x = Salary)) +
geom_point(aes(y = Years.Of.Experience)) +
geom_point(aes(y = pred_test), color = "red")
rmse(compare_train, Salary, pred_train)
rmse(compare_test, Salary, pred_test)
describe(filtered_data5, Salary)
#| message: false
#| warning: false
library(tidyverse)
library(tidymodels)
# zum Plotten der Korrelationsmatrix
library(corrplot)
aq <- airquality
aq <- aq |> drop_na()
cor(aq)
corrplot(cor(aq), method = "ellipse")
#| message: false
aq %>%
ggplot() +
aes(x = Temp, y = Ozone) +
geom_point() + geom_smooth(method=lm)
# Modell initialisieren
lm_model <- linear_reg() |> set_engine("lm")
# Modell trainieren ("fitten")
lm_fit <- lm_model |> fit(Ozone ~ Temp, data = aq)
summary <- lm_fit |> extract_fit_engine() |> summary()
summary
lm_fit2 <- lm_model |> fit(Ozone ~ Temp + Solar.R, data = aq)
lm_fit2
summary <- lm_fit2 |> extract_fit_engine() |> summary()
summary
lm_fit3 <- lm_model |> fit(Ozone ~ Temp + I(Temp^2), data = aq)
lm_fit3
summary <- lm_fit3 |> extract_fit_engine() |> summary()
summary
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue") +
geom_line(data = predictions, aes(x = Temp, y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue") +
geom_line(data = predictions, aes(x = Temp, y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
summary <- lm_fit3 |> extract_fit_engine() |> summary()
summary
#Years.Of.Experience zeigt und zusätzlich die Werte der linearen Regression lm_fit
plot(fd5_test$Years.Of.Experience, fd5_test$Salary, xlab = "Years.Of.Experience", ylab = "Salary", main = "Salary vs Years.Of.Experience")
abline(lm_fit, col = "red")
#| message: false
library(tidyverse)
library(tidymodels)
# zum Plotten der Korrelationsmatrix
library(corrplot)
# für Verwendung der vif-Funktion
library(car)
# Nur für 3D-Plot erforderlich
library(plotly)
#Um Plots nebeneinander anzuordnen
library(patchwork)
#für QQ und PP-Plots
library(qqplotr)
# Generate data
mydata <- tibble(ID = c(1:12),
Periode = c(1,2,3,4,5,6,7,8,9,10,11,12),
Absatz = c(2596,2709,2552,3004,3076,2513,2626,3120,2751,2965,2818,3171),
Werbung = c(203,216,207,250,240,226,246,250,235,256,242,251),
Preis = c(1.42,1.41,1.95,1.99,1.63,1.82,1.69,1.65,1.99,1.53,1.69,1.72),
Verkauf = c(150,120,146,270,200,93,70,230,166,116,100,216))
mydata
summary(mydata)
sd(mydata$Absatz)
sd(mydata$Werbung)
sd(mydata$Preis)
cor(mydata)
mydata |>
select(-ID, -Periode) |>
cor() |>
corrplot(method = 'ellipse')
#| message: false
mydata %>%
ggplot() +
aes(x = Werbung, y = Absatz) +
geom_point() + geom_smooth(method=lm)
# Modell initialisieren
lm_model <- linear_reg() |> set_engine("lm")
# Modell trainieren ("fitten")
lm_fit <- lm_model |> fit(Absatz ~ Werbung, data = mydata)
summary <- lm_fit |> extract_fit_engine() |> summary()
summary
ssr <- sum((summary$residuals^2))
ssr
#Standardfehler
sqrt(ssr/(12-1-1))
# Modell trainieren ("fitten")
lm_fit2 <- lm_model |> fit(Absatz ~ Werbung + Preis, data = mydata)
summary2 <- lm_fit2 |> extract_fit_engine() |> summary()
summary2
sum(summary2$residuals^2)
werbung <- mydata$Werbung
preis <- mydata$Preis
grid <- expand.grid(werbung, preis)
d <- setNames(data.frame(grid), c("Werbung", "Preis"))
vals <- predict(lm_fit2, new_data = d) |> pull(.pred)
shopping <- matrix(vals, nrow = length(d$Werbung), ncol = length(d$Preis))
plane <- shopping
rm(d, grid, vals)
p <- plot_ly(data = mydata, z = ~Absatz,
x = ~Preis, y = ~Werbung, opacity = 0.6) %>% add_markers()
p %>% add_surface(z = ~plane, x = ~Preis, y = ~Werbung, showscale = FALSE) %>% layout(showlegend = FALSE)
# Modell trainieren ("fitten")
lm_fit3 <- lm_model |> fit(Absatz ~ Werbung + Preis + Verkauf, data = mydata)
summary3 <- lm_fit3 |> extract_fit_engine() |> summary()
summary3
sum(summary3$residuals^2)
# Generate data
mydatc2_case <- data.frame(ID = c(1:40),
Shopping = c(6,   12, 2,  15, 2,  10, 17, 0,  18, 14, 5,  2,  8,  2,  3,  7,  2,  5,  5,  12, 5,  4,  6,  5,  2,  10, 10, 6,  14, 14, 5,  7,  6,  7,  12, 12, 9,  17, 15, 9),
Age = c(37,   25, 20, 53, 41, 44, 39, 46, 44, 39, 29, 29, 52, 46, 36, 24, 45, 52, 40, 43, 60, 25, 47, 43, 44, 39, 44, 27, 48, 35, 48, 52, 25, 31, 52, 60, 56, 40, 54, 56),
Gender = c(0, 0,  1,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  0,  0,  1,  0,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  0,  1,  1,  1,  0,  0,  1,  0,  0,  1,  0,  0,  0),
Income = c(1.8,   2.9,    2,  6.1,    2.2,    5.5,    5.4,    2.1,    5.6,    4.3,    2.9,    1.8,    3.7,    2.1,    3.2,    3.2,    2,  4.1,    4.4,    4.6,    3.5,    2.7,    4.9,    2.3,    3.9,    5.4,    4.6,    1.3,    6.1,    4.9,    3.1,    3,  2.9,    2.3,    4.9,    6.2,    4.4,    4.9,    6.3,    4.9))
# Set labels
var.labels <- c(Period = "i",
Shopping = "Shopping frequency",
Age = "Age",
Gender = "Gender (1 = male, 0 = female)",
Income = "Income in [1000 EUR]")
Hmisc::label(mydatc2_case) <- as.list(var.labels[match(names(mydatc2_case), names(var.labels))])
# Display generated data for verification
print(mydatc2_case)
# Modell trainieren ("fitten")
lm_fit_a1<- lm_model |> fit(Shopping ~ Age + Gender, data = mydatc2_case)
summary_a1 <- lm_fit_a1 |> extract_fit_engine() |> summary()
summary_a1
c1 <- summary_a1$coefficients[1]
c2 <- summary_a1$coefficients[2]
c3 <- summary_a1$coefficients[3]
# Modell trainieren ("fitten")
lm_fit_a2<- lm_model |> fit(Shopping ~ Age + Gender + Income, data = mydatc2_case)
summary_a2 <- lm_fit_a2 |> extract_fit_engine() |> summary()
summary_a2
#| message: false
p1 <- mydatc2_case |>
ggplot(aes(x = Income, y = Shopping)) +
geom_point() +
geom_smooth(method = "lm")
p2 <- mydatc2_case |>
ggplot(aes(x = Age, y = Shopping)) +
geom_point() +
geom_smooth(method = "lm")
p3 <- mydatc2_case |>
ggplot(aes(x = Gender, y = Shopping)) +
geom_point() +
geom_smooth(method = "lm")
p1 + p2 + p3
mydatc2_case |>
select(-"ID") |>
cor() |>
corrplot(method = "number", type = "lower", order = "FPC")
# get unstandardized predicted and residual values
unstandardizedPredicted <- predict(lm_fit_a2, new_data = mydatc2_case) |> pull(.pred)
unstandardizedResiduals <- summary_a2$residuals
# get standardized values
standardizedPredicted <- (unstandardizedPredicted - mean(unstandardizedPredicted)) / sd(unstandardizedPredicted)
standardizedResiduals <- (unstandardizedResiduals - mean(unstandardizedResiduals)) / sd(unstandardizedResiduals)
tibble(standardizedPredicted, standardizedResiduals) |>
ggplot(aes(x = standardizedPredicted, y = standardizedResiduals)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title = "Tukey-Anscombe-Plot (Modell 2)",
y = "Residuen (standardisiert)",
x = "Geschätzte Werte (standardisiert)")
# get unstandardized predicted and residual values
unstandardizedPredicted1 <- predict(lm_fit_a1, new_data = mydatc2_case) |> pull(.pred)
unstandardizedResiduals1 <- summary_a1$residuals
# get standardized values
standardizedPredicted1 <- (unstandardizedPredicted1 - mean(unstandardizedPredicted1)) / sd(unstandardizedPredicted1)
standardizedResiduals1 <- (unstandardizedResiduals1 - mean(unstandardizedResiduals1)) / sd(unstandardizedResiduals1)
tibble(standardizedPredicted1, standardizedResiduals1) |>
ggplot(aes(x = standardizedPredicted1, y = standardizedResiduals1)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title = "Tukey-Anscombe-Plot (Modell 1)",
y = "Residuen (standardisiert)",
x = "Geschätzte Werte (standardisiert)")
tibble(standardizedResiduals) |>
ggplot(aes(x = standardizedResiduals)) +
geom_histogram(binwidth = 0.1) +
labs(title = "Histogramm der Residuen (standardisiert)",
x = "Residuen (standardisiert)",
y = "Anzahl")
tibble(standardizedResiduals) |>
ggplot(aes(sample = standardizedResiduals)) +
stat_qq_line() +
stat_qq_point() +
labs(title = "QQ-Plot der standardisierten Residuen",
x = "Quantile der Normalverteilung",
y = "Quantile der Residuen")
vif(lm_fit_a2 |> extract_fit_engine())
# Observed and standardized values
mydatc2t <- data.frame(Period = c(1:12),
Sales = c(2596,2709,2552,3004,3076,2513,2626,3120,2751,2965,2818,3171),
Time = c(1:12),
d1 = c(1,0,0,0,1,0,0,0,1,0,0,0),
d2 = c(0,1,0,0,0,1,0,0,0,1,0,0),
d3 = c(0,0,1,0,0,0,1,0,0,0,1,0),
d4 = c(0,0,0,1,0,0,0,1,0,0,0,1))
# Set labels
var.labels <- c(Period = "i",
Sales = "1000 units",
Time = "t [Quarter]",
d1 = "d1",
d2 = "d2",
d3 = "d3",
d4 = "d4")
Hmisc::label(mydatc2t) <- as.list(var.labels[match(names(mydatc2t), names(var.labels))])
#  Display generated data for verification; # Structure of the generated data
print(mydatc2t)
mydatc2t %>%
ggplot() +
aes(x = Time, y = Sales) +
geom_point() + geom_smooth(method=lm)
reg <- lm(Sales ~ Time, data = mydatc2t)
summary(reg)
timereg.1 <- lm(Sales~d1+d2+d3+d4+Time-1, data = mydatc2t)
summary(timereg.1)
f1 <- 2676
f2 <- 2571
f3 <- 2481
f4 <- 2887
xv <- c(1,2,3,4,5,6,7,8,9,10,11,12)
yv <- c(f1+26.38,f2+52.76, f3+26.38*3, f4+26.38*4, f1+26.38*5, f2+26.38*6, f3+26.38*7, f4+26.38*8,f1+26.38*9, f2+26.38*10, f3+26.38*11, f4+26.38*12)
plot(mydatc2t$Sales~mydatc2t$Time,
xlab = "Time",
ylab = "Sales",
cex.main = 1,
cex.lab = 1,
cex.axis = 1);
lines(xv,yv)
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = "blue", alpha = 0.5) +
geom_line(aes(y = pred_train), color = "red", size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
theme_minimal()
# Erstellen Sie eine ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = "blue", alpha = 0.5) +
geom_line(aes(y = pred_test), color = "red", size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.5), alpha = 0.5) +
geom_line(aes(y = pred_train), color = viridis(0.9), size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_viridis() +
scale_y_continuous(labels = scales::comma) +  # Fügt Tausender-Trennzeichen hinzu
theme_minimal()
# Erstellen Sie eine ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.5), alpha = 0.5) +
geom_line(aes(y = pred_test), color = viridis(0.9), size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_viridis() +
scale_y_continuous(labels = scales::comma) +  # Fügt Tausender-Trennzeichen hinzu
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen einer ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.5), alpha = 0.5) +
geom_line(aes(y = pred_train), color = viridis(0.9), size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_manual(values = c("blue", "red")) +  # Unterschiedliche Farben für Punkte und Linie
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Erstellen einer ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.5), alpha = 0.5) +
geom_line(aes(y = pred_test), color = viridis(0.9), size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_manual(values = c("blue", "red")) +  # Unterschiedliche Farben für Punkte und Linie
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen einer ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.5), alpha = 0.5) +
geom_line(aes(y = pred_train), color = viridis(1), size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_manual(values = c("blue", "red")) +  # Unterschiedliche Farben für Punkte und Linie
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Erstellen einer ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.5), alpha = 0.5) +
geom_line(aes(y = pred_test), color = viridis(1), size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_manual(values = c("blue", "red")) +  # Unterschiedliche Farben für Punkte und Linie
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_train), color = viridis(0.90), size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Identitätsskala für manuelle Farbzuweisung
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Erstellen Sie eine ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_test), color = viridis(0.90), size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Identitätsskala für manuelle Farbzuweisung
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_train), color = red, size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Identitätsskala für manuelle Farbzuweisung
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_train), color = "red", size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Identitätsskala für manuelle Farbzuweisung
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Erstellen Sie eine ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_test), color = "red"", size = 1) +
labs(title = "Vorhersage auf Testdaten",
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_train), color = viridis(0.90), size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Farben beibehalten
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Erstellen Sie eine ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_test), color = viridis(0.90), size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Farben beibehalten
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Daten für Training und Test
train_data <- cbind(fd5_train, pred_train)
test_data <- cbind(fd5_test, pred_test)
# Erstellen Sie eine ggplot-Grafik für die Trainingsdaten
ggplot(train_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_train), color = "deeppink3", size = 1) +
labs(title = "Vorhersage auf Trainingsdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Farben beibehalten
scale_y_continuous(labels = scales::comma) +
theme_minimal()
# Erstellen Sie eine ggplot-Grafik für die Testdaten
ggplot(test_data, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(0.50), alpha = 0.5) +
geom_line(aes(y = pred_test), color = "deeppink3", size = 1) +
labs(title = "Vorhersage auf Testdaten",
x = "Years of Experience",
y = "Salary") +
scale_color_identity() +  # Farben beibehalten
scale_y_continuous(labels = scales::comma) +
theme_minimal()
