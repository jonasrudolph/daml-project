theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Korrelation zwischen Salary und Years.Of.Experience berechnen
correlation_salary_experience <- cor(salary_final$Salary, salary_final$Years.Of.Experience)
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Salary und Years.Of.Experience ist:", correlation_salary_experience, "\n")
# Korrelation zwischen Salary und Age berechnen
correlation_salary_age <- cor(salary_final$Salary, salary_final$Age, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Salary und Age ist:", correlation_salary_age, "\n")
# Korrelation zwischen Years.Of.Experience und Age berechnen
correlation_experience_age <- cor(salary_final$Years.Of.Experience, salary_final$Age, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Years.Of.Experience und Age ist:", correlation_experience_age, "\n")
# Korrelation zwischen Seniority und Years.Of.Experience berechnen
correlation_seniority_experience <- cor(salary_final$Senior, salary_final$Years.Of.Experience, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Seniority und Years.Of.Experience ist:", correlation_seniority_experience, "\n")
correlations <- cor(salary_final[, c("Age", "Education.Level", "Years.Of.Experience", "Salary")])
print(correlations)
filtered_data_numeric <- select(salary, Salary, Age, Years.Of.Experience, Education.Level)
glimpse(filtered_data_numeric)
cor(filtered_data_numeric)
#Erstellen des Korrelationplots
corrplot(cor(filtered_data_numeric), method = "ellipse", col = viridis(200))
#Erstellen des Streudiagrammes
ggplot(salary_final, aes(x = Years.Of.Experience, y = Salary)) +
geom_point(color = viridis(2)[1], size = 3, shape = 16) +
labs(title = "Streudiagramm von Berufserfahrung vs. Gehalt",
x = "Berufserfahrung",
y = "Gehalt")
ggplot(salary_final, aes(x = Education.Level, y = Salary)) +
geom_point(color = viridis(2)[1], size = 3, shape = 16) +
labs(title = "Scatter Plot of Education Level vs Salary",
x = "Years of Experience",
y = "Salary")
#Erstellen des Diagramms
ggplot(salary_final, aes(x = Race, y = Salary, fill = Race)) +
stat_summary(fun = "mean", geom = "bar") +
scale_fill_viridis(discrete = TRUE) +
ggtitle("Durchschnittliches Gehalt nach Ethnizität") +
xlab("Rasse") +
ylab("Durchschnittliches Gehalt")
ggplot(salary_final, aes(x = Country, y = Salary, fill = Country)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Durchschnittliches Gehalt nach Land",
x = "Land",
y = "Durchschnittliches Gehalt") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(salary_final, aes(x = Country, y = Salary, fill = Gender)) +
geom_bar(stat = "summary", fun = "mean", position = "stack", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Average Salary by Country and Gender",
x = "Country",
y = "Average Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(salary_final, aes(x = Country, y = Salary, fill = factor(Education.Level))) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Average Salary by Country and Education Level",
x = "Country",
y = "Average Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(salary_final, aes(x = Country, y = Salary, fill = Race)) +
geom_bar(stat = "summary", fun = "mean", position = "stack", color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Average Salary by Country and Race",
x = "Country",
y = "Average Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(salary_final, aes(x = Job.Title, y = Salary)) +
geom_bar(stat = "summary", fun = "mean", color = viridis(2)[1], color = viridis(2)[1]) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Average Salary by Job Title",
x = "Job Title",
y = "Average Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
job_title_count <- table(salary_final$Job.Title)
print(job_title_count)
job_title_count <- table(salary_final$Job.Title)
job_title_df <- data.frame(Job_Title = names(job_title_count), Frequency = as.numeric(job_title_count))
ggplot(job_title_df, aes(x = Job_Title, y = Frequency)) +
geom_bar(stat = "identity", fill = viridis(2)[1], color = "black") +
labs(title = "Frequency of Unique Job Titles",
x = "Job Titles",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
# Zählen der Vorkommen für jeden Jobtitel
job_title_count <- salary %>%
count(`Job.Title`, sort = TRUE)
job_title_count
ggplot(salary_final, aes(x = Country, y = Salary, fill = Race)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
stat_summary(fun = "median", geom = "point", shape = 18, size = 3, color = "red", position = position_dodge(width = 0.75)) +
labs(title = "Salary Distribution by Country and Race",
x = "Country",
y = "Salary") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_data <- salary_final %>%
group_by(Job.Title) %>%
summarise(job_count = n()) %>%
filter(job_count > 30) %>%
inner_join(salary_final, by = "Job.Title")
print(filtered_data)
job_title_count <- table(filtered_data$Job.Title)
print(job_title_count)
job_title_count <- table(filtered_data$Job.Title)
job_title_df <- data.frame(Job_Title = names(job_title_count), Frequency = as.numeric(job_title_count))
ggplot(job_title_df, aes(x = Job_Title, y = Frequency)) +
geom_bar(stat = "identity", fill = viridis(2)[1], color = "black") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Frequency of Unique Job Titles",
x = "Job Titles",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
job_title_count_filtered <- table(filtered_data$Job.Title)
cat(paste(names(job_title_count_filtered), ":", job_title_count_filtered, "\n"))
# Filtern nach technischen Jobs
technische_jobs <- filtered_data[grep("data|engineer|developer|analyst|scientist", tolower(filtered_data$Job.Title)), ]
# Filtern nach wirtschaftlichen/administrativen Jobs
admin_jobs <- filtered_data[grep("associate|director|manager|sales|coordinator|generalist|receptionist|designer", tolower(filtered_data$Job.Title)), ]
# Beispiel für die Ausgabe der ersten paar Zeilen der gefilterten Daten
head(technische_jobs)
head(admin_jobs)
# Anzahl der technischen Jobs
anzahl_technische_jobs <- nrow(technische_jobs)
cat("Anzahl der technischen Jobs:", anzahl_technische_jobs, "\n")
# Anzahl der administrativen Jobs
anzahl_admin_jobs <- nrow(admin_jobs)
cat("Anzahl der administrativen Jobs:", anzahl_admin_jobs, "\n")
# Anzahl der Zeilen (Werte) in filtered_data
anzahl_werte_filtered_data <- nrow(filtered_data)
# Anzeigen der Anzahl der Werte
cat("Anzahl der Werte in filtered_data:", anzahl_werte_filtered_data, "\n")
anzahl_jobs <- anzahl_technische_jobs + anzahl_admin_jobs
cat(anzahl_jobs)
# Add ID-Spalte
filtered_data$ID <- 1:nrow(filtered_data)
# Filtern nach technischen Jobs und Entfernen von Duplikaten
technische_jobs2 <- unique(filtered_data[grep("data|engineer|developer|analyst|scientist", tolower(filtered_data$Job.Title)), ])
# Filtern nach wirtschaftlichen/administrativen Jobs und Entfernen von Duplikaten
admin_jobs2 <- unique(filtered_data[grep("associate|director|manager|sales|coordinator|generalist|receptionist|designer", tolower(filtered_data$Job.Title)), ])
# Merke die IDs der übereinstimmenden Zeilen
ids_technische_jobs <- filtered_data$ID[filtered_data$Job.Title %in% technische_jobs2$Job.Title]
ids_admin_jobs <- filtered_data$ID[filtered_data$Job.Title %in% admin_jobs2$Job.Title]
# Entferne die entsprechenden Zeilen aus filtered_data
filtered_data_neu <- filtered_data[!(filtered_data$ID %in% c(ids_technische_jobs, ids_admin_jobs)), ]
# Beispiel für die Ausgabe der ersten paar Zeilen der gefilterten Daten
head(filtered_data_neu)
anzahl_technische_jobs2 <- nrow(technische_jobs2)
cat("Anzahl der technischen Jobs2:", anzahl_technische_jobs2, "\n")
anzahl_admin_jobs2 <- nrow(admin_jobs2)
cat("Anzahl der administrativen Jobs2:", anzahl_admin_jobs2, "\n")
# Erstellung der neuen Spalte "job_type" basierend auf den gegebenen Filtern
filtered_data$job_type <- ifelse(
grepl("data|engineer|developer|analyst|scientist", tolower(filtered_data$Job.Title)),
0, # 0 für technische Jobs
ifelse(
grepl("associate|director|manager|sales|coordinator|generalist", tolower(filtered_data$Job.Title)),
1, # 1 für administrative Jobs
NA  # NA für alle anderen
)
)
# Anzeige der Anzahl aller Zeilen im Datensatz und der Anzahl der Zeilen für jede job_type-Ausprägung
total_rows <- nrow(filtered_data)
count_job_types <- table(filtered_data$job_type, useNA = "ifany")
# Ausgabe der Ergebnisse
print(paste("Gesamtanzahl der Zeilen im Datensatz:", total_rows))
print("Anzahl der Zeilen für jede job_type-Ausprägung:")
print(count_job_types)
# Auswahl aller Zeilen mit NA-Werten in der Spalte "job_type"
na_job_type_rows <- subset(filtered_data, is.na(job_type))
# Anzeige der ausgewählten Zeilen mit NA in "job_type"
na_job_type_rows
# Aktualisierung der job_type-Spalte für die spezifischen Job-Titel
filtered_data$job_type[filtered_data$Job.Title %in% c("Product Designer", "Receptionist")] <- 1
# Anzeige der aktualisierten Daten für die ausgewählten Job-Titel
subset(filtered_data, Job.Title %in% c("Product Designer", "Receptionist"))
# Anzeige der Anzahl aller Zeilen im Datensatz und der Anzahl der Zeilen für jede job_type-Ausprägung
total_rows <- nrow(filtered_data)
count_job_types <- table(filtered_data$job_type, useNA = "ifany")
# Ausgabe der Ergebnisse
print(paste("Gesamtanzahl der Zeilen im Datensatz:", total_rows))
print("Anzahl der Zeilen für jede job_type-Ausprägung:")
print(count_job_types)
ggplot(filtered_data, aes(x = factor(Gender), y = Years.Of.Experience, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender",
x = "Gender",
y = "Years of Experience",
fill = "Gender") +
theme_minimal()
# Bibliothek ggplot2 laden
library(ggplot2)
# Daten für China filtern
data_china <- subset(filtered_data, Country == "China")
# Boxplot erstellen
ggplot(data_china, aes(x = factor(Gender), y = Years.Of.Experience, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender (China)",
x = "Gender",
y = "Years of Experience",
fill = "Gender") +
theme_minimal()
# Bibliothek ggplot2 laden
library(ggplot2)
# Daten für USA filtern
data_usa <- subset(filtered_data, Country == "USA")
# Boxplot erstellen
ggplot(data_usa, aes(x = factor(Gender), y = Years.Of.Experience, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender (USA)",
x = "Gender",
y = "Years of Experience",
fill = "Gender") +
theme_minimal()
# Bibliothek ggplot2 laden
library(ggplot2)
# Daten für China filtern
data_china <- subset(filtered_data, Country == "China")
# Boxplot für Salary vs. Gender erstellen
ggplot(data_china, aes(x = factor(Gender), y = Salary, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Salary vs. Gender (China)",
x = "Gender",
y = "Salary",
fill = "Gender") +
theme_minimal()
# Bibliothek ggplot2 laden
library(ggplot2)
# Daten für USA filtern
data_usa <- subset(filtered_data, Country == "USA")
# Boxplot für Salary vs. Gender erstellen
ggplot(data_usa, aes(x = factor(Gender), y = Salary, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Salary vs. Gender (USA)",
x = "Gender",
y = "Salary",
fill = "Gender") +
theme_minimal()
# Korrelation zwischen Salary und Years.Of.Experience berechnen
correlation_salary_experience <- cor(filtered_data$Salary, filtered_data$Years.Of.Experience)
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Salary und Years.Of.Experience ist:", correlation_salary_experience, "\n")
# Korrelation zwischen Salary und Education.Level berechnen
correlation_salary_education <- cor(filtered_data$Salary, filtered_data$Education.Level, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Salary und Education.Level ist:", correlation_salary_education, "\n")
# Korrelation zwischen Salary und Age berechnen
correlation_salary_age <- cor(filtered_data$Salary, filtered_data$Age, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Salary und Age ist:", correlation_salary_age, "\n")
# Korrelation zwischen Years.Of.Experience und Age berechnen
correlation_experience_age <- cor(filtered_data$Years.Of.Experience, filtered_data$Age, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Years.Of.Experience und Age ist:", correlation_experience_age, "\n")
# Annahme: "filtered_data" ist Ihr Datensatz
# Annahme: Die Spalten sind "Seniority" und "Years.Of.Experience"
# Korrelation zwischen Seniority und Years.Of.Experience berechnen
correlation_seniority_experience <- cor(filtered_data$Senior, filtered_data$Years.Of.Experience, use = "complete.obs")
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Seniority und Years.Of.Experience ist:", correlation_seniority_experience, "\n")
# Filtern der Daten für technische und administrative Jobs basierend auf den Kriterien
technische_jobs <- subset(filtered_data, job_type == 0)
admin_jobs <- subset(filtered_data, job_type == 1)
# Durchschnittliche Gehälter pro Jobtyp für technische Jobs berechnen
average_salaries_technical <- mean(technische_jobs$Salary, na.rm = TRUE)
# Durchschnittliche Gehälter pro Jobtyp für administrative Jobs berechnen
average_salaries_admin <- mean(admin_jobs$Salary, na.rm = TRUE)
# Zusammenführen der durchschnittlichen Gehälter in einem Datenrahmen
all_average_salaries <- data.frame(Job.Type = c("technisch", "admin"),
Average.Salary = c(average_salaries_technical, average_salaries_admin))
# Erstellung des Diagramms mit angepasster Achsenbeschriftung
ggplot(all_average_salaries, aes(x = Job.Type, y = Average.Salary, fill = Job.Type)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Durchschnittliche Gehälter nach Jobtyp",
x = "Jobtyp",
y = "Durchschnittliches Gehalt") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Verwendung von scales::comma für die Achsenbeschriftung in Tausenden
ggplot(filtered_data, aes(x = Country, fill = Race)) +
geom_bar(position = "dodge") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Count of Races in Each Country",
x = "Country",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Erstellen der Spalte "Expat" basierend auf den angegebenen Kriterien
filtered_data$Expat <- 0  # Standardwert 0 (Einheimische)
# Festlegen von Bedingungen für Expats basierend auf Land und Ethnizität
expat_conditions <- list(
filtered_data$Race == "African American" & filtered_data$Country == "USA",
filtered_data$Race %in% c("White", "Chinese", "Australian", "Welsh") &
filtered_data$Country %in% c("Canada", "USA", "UK", "Australia"),
TRUE  # Für alle anderen Rassen (Expat)
)
# Setzen von Werten entsprechend den Bedingungen
filtered_data$Expat <- ifelse(expat_conditions[[1]] | expat_conditions[[2]], 0,
ifelse(expat_conditions[[3]], 1, NA))
# Anzeige des aktualisierten Datensatzes zur Überprüfung
head(filtered_data)
ggplot(filtered_data, aes(x = factor(Gender), y = Salary, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Salary vs. Gender",
x = "Gender",
y = "Salary",
fill = "Gender") +
theme_minimal()
# Daten für USA filtern
data_usa <- subset(filtered_data, Country == "USA")
# Boxplot erstellen
ggplot(data_usa, aes(x = factor(Gender), y = Years.Of.Experience, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender (USA)",
x = "Gender",
y = "Years of Experience",
fill = "Gender") +
theme_minimal()
# Daten für China filtern
data_china <- subset(filtered_data, Country == "China")
# Boxplot für Salary vs. Gender erstellen
ggplot(data_china, aes(x = factor(Gender), y = Years.Of.Experience, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender (China)",
x = "Gender",
y = "Salary",
fill = "Gender") +
theme_minimal()
# Daten für USA filtern
data_usa <- subset(filtered_data, Country == "USA")
# Boxplot erstellen
ggplot(data_usa, aes(x = factor(Gender), y = Salary, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender (USA)",
x = "Gender",
y = "Years of Experience",
fill = "Gender") +
theme_minimal()
# Daten für China filtern
data_china <- subset(filtered_data, Country == "China")
# Boxplot für Salary vs. Gender erstellen
ggplot(data_china, aes(x = factor(Gender), y = Salary, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Salary vs. Gender (China)",
x = "Gender",
y = "Salary",
fill = "Gender") +
theme_minimal()
# Korrelation zwischen Salary und Years.Of.Experience berechnen
correlation_salary_experience <- cor(filtered_data$Salary, filtered_data$Years.Of.Experience)
# Ausgabe des Ergebnisses
cat("Die Korrelation zwischen Salary und Years.Of.Experience ist:", correlation_salary_experience, "\n")
ggplot(filtered_data, aes(x = factor(Gender), y = Years.Of.Experience, fill = Gender)) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Boxplot: Years of Experience vs. Gender",
x = "Gender",
y = "Years of Experience",
fill = "Gender") +
theme_minimal()
ggplot(filtered_data, aes(x = Country, fill = Race)) +
geom_bar(position = "dodge") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Count of Races in Each Country",
x = "Country",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Erstellung des Boxplots für Expats und Einheimische
ggplot(filtered_data, aes(x = as.factor(Expat), y = Salary, fill = factor(Expat))) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Vergleich der Gehälter von Zugewanderten und Einheimischen",
x = "Expat",
y = "Gehalt") +
scale_x_discrete(labels = c("Einheimische (0)", "Zugewanderte (1)")) +
theme_minimal()
# Mittelwert der Gehälter für Expats (Expat = 1)
mean_salary_expat <- mean(filtered_data$Salary[filtered_data$Expat == 1], na.rm = TRUE)
mean_salary_expat
# Mittelwert der Gehälter für Einheimische (Expat = 0)
mean_salary_native <- mean(filtered_data$Salary[filtered_data$Expat == 0], na.rm = TRUE)
mean_salary_native
# Bibliotheken laden
library(ggplot2)
library(dplyr)
# Daten berechnen
salary_percentiles <- filtered_data %>%
group_by(Education.Level) %>%
summarise(`10th Percentile` = quantile(Salary, probs = 0.1, na.rm = TRUE),
`25th Percentile` = quantile(Salary, probs = 0.25, na.rm = TRUE),
`50th Percentile (Median)` = quantile(Salary, probs = 0.5, na.rm = TRUE),
`75th Percentile` = quantile(Salary, probs = 0.75, na.rm = TRUE),
`90th Percentile` = quantile(Salary, probs = 0.9, na.rm = TRUE))
# Reshape der Daten für das Plotting
salary_percentiles_long <- salary_percentiles %>%
tidyr::pivot_longer(cols = -Education.Level, names_to = "Percentile", values_to = "Salary")
# Diagramm erstellen
ggplot(salary_percentiles_long, aes(x = Education.Level, y = Salary, fill = Percentile)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Perzentile des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt",
fill = "Perzentil") +
theme_minimal()
# Berechnung der Durchschnittsgehälter pro Bildungsniveau
average_salary_education <- aggregate(Salary ~ Education.Level, data = filtered_data, FUN = mean, na.rm = TRUE)
# Anzeige der Durchschnittsgehälter pro Bildungsniveau
average_salary_education
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Boxplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_boxplot(color = "black", fill = viridis(2)[2]) +
labs(title = "Boxplot des Gehalts nach Bildungsniveau",
x = "Bildungsniveau",
y = "Gehalt") +
theme_minimal()
# Bildungsniveau nach aufsteigender Reihenfolge sortieren
filtered_data <- filtered_data %>%
mutate(Education.Level = factor(Education.Level, levels = unique(sort(Education.Level))))
# Scatterplot erstellen
ggplot(filtered_data, aes(x = reorder(factor(Education.Level), Salary, FUN = median), y = Salary)) +
geom_point() +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Gehalt nach Bildungslevel",
x = "Bildungslevel",
y = "Gehalt") +
theme_minimal()
# Bildungslevel neu ordnen
filtered_data$Education.Level <- factor(filtered_data$Education.Level, levels = c("0", "1", "2", "3"))
# Liniendiagramm mit umgekehrter Reihenfolge des Bildungsniveaus erstellen
ggplot(filtered_data, aes(x = Education.Level, y = Salary, group = 1)) +
geom_line() +
stat_summary(fun.y = median, geom = "point", size = 3, color = "red") +
labs(title = "Gehalt nach Bildungslevel",
x = "Bildungslevel",
y = "Gehalt") +
theme_minimal()
# Kopie von filtered_data als filtered_data2 erstellen
filtered_data2 <- filtered_data
# Filtern der Daten für Jobs mit "Director" im Jobtitel in filtered_data2
director_jobs <- filtered_data2 %>%
filter(grepl("Director", Job.Title))
# Entfernen der Zeilen mit "Director" aus filtered_data2
filtered_data2 <- filtered_data2 %>%
anti_join(director_jobs)
# Kopie von filtered_data als filtered_data2 erstellen
filtered_data2 <- filtered_data
# Filtern der Daten für Jobs mit "Director" im Jobtitel in filtered_data2
director_jobs <- filtered_data2 %>%
filter(grepl("Director", Job.Title))
# Entfernen der Zeilen mit "Director" aus filtered_data2
filtered_data2 <- filtered_data2 %>%
anti_join(director_jobs)
nrow(director_jobs)
nrow(filtered_data)
nrow(filtered_data2)
# Filtern der Daten für technische und administrative Jobs basierend auf den Kriterien
technische_jobs <- subset(filtered_data, job_type == 0)
admin_jobs <- subset(filtered_data, job_type == 1)
# Durchschnittliche Gehälter pro Jobtyp für technische Jobs berechnen
average_salaries_technical <- mean(technische_jobs$Salary, na.rm = TRUE)
# Durchschnittliche Gehälter pro Jobtyp für administrative Jobs berechnen
average_salaries_admin <- mean(admin_jobs$Salary, na.rm = TRUE)
# Zusammenführen der durchschnittlichen Gehälter in einem Datenrahmen
all_average_salaries <- data.frame(Job.Type = c("technisch", "admin"),
Average.Salary = c(average_salaries_technical, average_salaries_admin))
# Erstellung des Diagramms mit angepasster Achsenbeschriftung
ggplot(all_average_salaries, aes(x = Job.Type, y = Average.Salary, fill = Job.Type)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Durchschnittliche Gehälter nach Jobtyp",
x = "Jobtyp",
y = "Durchschnittliches Gehalt") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Verwendung von scales::comma für die Achsenbeschriftung in Tausenden
# Filtern der Daten für technische und administrative Jobs basierend auf den Kriterien
technische_jobs <- subset(filtered_data, job_type == 0)
admin_jobs <- subset(filtered_data, job_type == 1)
# Durchschnittliche Gehälter pro Jobtyp für technische Jobs berechnen
average_salaries_technical <- mean(technische_jobs$Salary, na.rm = TRUE)
# Durchschnittliche Gehälter pro Jobtyp für administrative Jobs berechnen
average_salaries_admin <- mean(admin_jobs$Salary, na.rm = TRUE)
# Ausgabe der berechneten durchschnittlichen Gehälter mit Beschriftung
cat("Durchschnittliches Gehalt für technische Jobs:", average_salaries_technical, "\n")
cat("Durchschnittliches Gehalt für administrative Jobs:", average_salaries_admin, "\n")
#Daten nach Bildungsniveau, Land und Median des Gehalts gruppieren
summary_data <- aggregate(Salary ~ Education.Level + Country, data = filtered_data, FUN = median)
#Balkendiagramm erstellen
ggplot(summary_data, aes(x = Education.Level, y = Salary, fill = Country)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_viridis(discrete = TRUE) +
labs(title = "Median Gehalt nach Bildungslevel und Land",
x = "Bildungslevel",
y = "Median Gehalt",
fill = "Land") +
theme_minimal()
