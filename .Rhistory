summary <- lm_fit2 |> extract_fit_engine() |> summary()
summary
lm_fit2 <- lm_model |> fit(Ozone ~ Temp + Solar.R, data = aq)
lm_fit2
lm_fit3 <- lm_model |> fit(Ozone ~ Temp + I(Temp^2), data = aq)
lm_fit3
summary <- lm_fit3 |> extract_fit_engine() |> summary()
summary
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, newdata = aq))
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
# Create a scatterplot with ggplot
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue", size = 3) +
geom_line(data = predictions, aes(y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
# Create a scatterplot with ggplot
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue", linewidth = 3) +
geom_line(data = predictions, aes(y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
# Create a scatterplot with ggplot
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue") +
geom_line(data = predictions, aes(y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(aes(color = "blue")) +
geom_line(data = predictions, aes(x = Temp, y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(aes(color = "blue")) +
geom_line(data = predictions, aes(x = Temp, y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
predictions <- data.frame(Temp = aq$Temp, Ozone = lm_fit3$fitted.values)
predictions <- data.frame(Temp = aq$Temp, Ozone = lm_fit3$fitted.values)
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, newdata = aq))
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue") +
geom_line(data = predictions, aes(x = Temp, y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, newdata = aq))
predictions <- data.frame(Temp = aq$Temp, Ozone = predict(lm_fit3, new_data = aq))
# Create a scatterplot with ggplot
ggplot(aq, aes(x = Temp, y = Ozone)) +
geom_point(color = "blue") +
geom_line(data = predictions, aes(x = Temp, y = Ozone), color = "red", size = 1) +
labs(title = "Observed vs. Predicted Ozone Levels",
x = "Temperature",
y = "Ozone") +
theme_minimal()
library(tidyverse)
library(tidymodels)
library(randomForest)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
install.packages("mlbench")
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
Zoo <- as_tibble(Zoo)
head(Zoo)
Zoo <- Zoo %>%
modify_if(is.logical, factor, levels = c(TRUE, FALSE))
head(Zoo)
summary(Zoo)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
pred <- predict(tree_fit_1, new_data = Zoo)
results1 <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results1, truth = type, estimate = .pred_class)
conf_mat(data = results1, truth = type, estimate = .pred_class)
my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
toothed = TRUE, backbone = TRUE, breathes = TRUE, venomous = FALSE,
fins = FALSE, legs = 4, tail = TRUE, domestic = FALSE,
catsize = FALSE, type = NA)
my_animal <- my_animal %>% modify_if(is.logical, factor, levels = c(TRUE, FALSE))
my_animal
predict(tree_fit_1, new_data = my_animal)
tree_mod_of <- decision_tree(mode = "classification",
cost_complexity = 0,
min_n = 2)
tree_full <- tree_mod_of %>%
fit(type ~ ., data = Zoo)
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
pred <- predict(tree_full, new_data = Zoo)
results <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results, truth = type, estimate = .pred_class)
set.seed(123)
Zoo_split <- initial_split(Zoo, prop = 0.8, strata = type)
Zoo_train <- training(Zoo_split)
Zoo_test  <- testing(Zoo_split)
forest_mod <- rand_forest(mtry = 3, trees = 2000) %>%
set_mode("classification")
forest_fit <- forest_mod %>%
fit(type ~ ., data = Zoo_train)
final_tree <- extract_workflow(final_fit)
final_wf <-
tree_wf %>%
finalize_workflow(best_tree)
final_fit <-
final_wf %>%
last_fit(Zoo_split)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
Zoo <- as_tibble(Zoo)
head(Zoo)
Zoo <- Zoo %>%
modify_if(is.logical, factor, levels = c(TRUE, FALSE))
head(Zoo)
summary(Zoo)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
pred <- predict(tree_fit_1, new_data = Zoo)
results1 <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results1, truth = type, estimate = .pred_class)
conf_mat(data = results1, truth = type, estimate = .pred_class)
my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
toothed = TRUE, backbone = TRUE, breathes = TRUE, venomous = FALSE,
fins = FALSE, legs = 4, tail = TRUE, domestic = FALSE,
catsize = FALSE, type = NA)
my_animal <- my_animal %>% modify_if(is.logical, factor, levels = c(TRUE, FALSE))
my_animal
predict(tree_fit_1, new_data = my_animal)
tree_mod_of <- decision_tree(mode = "classification",
cost_complexity = 0,
min_n = 2)
tree_full <- tree_mod_of %>%
fit(type ~ ., data = Zoo)
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
pred <- predict(tree_full, new_data = Zoo)
results <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results, truth = type, estimate = .pred_class)
set.seed(123)
Zoo_split <- initial_split(Zoo, prop = 0.8, strata = type)
Zoo_train <- training(Zoo_split)
Zoo_test  <- testing(Zoo_split)
forest_mod <- rand_forest(mtry = 3, trees = 2000) %>%
set_mode("classification")
forest_fit <- forest_mod %>%
fit(type ~ ., data = Zoo_train)
final_tree <- extract_workflow(final_fit)
final_tree <- extract_workflow(final_fit)
final_fit <-
final_wf %>%
last_fit(Zoo_split)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
Zoo <- as_tibble(Zoo)
head(Zoo)
Zoo <- Zoo %>%
modify_if(is.logical, factor, levels = c(TRUE, FALSE))
head(Zoo)
summary(Zoo)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
pred <- predict(tree_fit_1, new_data = Zoo)
results1 <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results1, truth = type, estimate = .pred_class)
conf_mat(data = results1, truth = type, estimate = .pred_class)
my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
toothed = TRUE, backbone = TRUE, breathes = TRUE, venomous = FALSE,
fins = FALSE, legs = 4, tail = TRUE, domestic = FALSE,
catsize = FALSE, type = NA)
my_animal <- my_animal %>% modify_if(is.logical, factor, levels = c(TRUE, FALSE))
my_animal
predict(tree_fit_1, new_data = my_animal)
tree_mod_of <- decision_tree(mode = "classification",
cost_complexity = 0,
min_n = 2)
tree_full <- tree_mod_of %>%
fit(type ~ ., data = Zoo)
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
pred <- predict(tree_full, new_data = Zoo)
results <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results, truth = type, estimate = .pred_class)
set.seed(123)
Zoo_split <- initial_split(Zoo, prop = 0.8, strata = type)
Zoo_train <- training(Zoo_split)
Zoo_test  <- testing(Zoo_split)
forest_mod <- rand_forest(mtry = 3, trees = 2000) %>%
set_mode("classification")
forest_fit <- forest_mod %>%
fit(type ~ ., data = Zoo_train)
install.packages("ranger")
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
Zoo <- as_tibble(Zoo)
head(Zoo)
Zoo <- Zoo %>%
modify_if(is.logical, factor, levels = c(TRUE, FALSE))
head(Zoo)
summary(Zoo)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
pred <- predict(tree_fit_1, new_data = Zoo)
results1 <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results1, truth = type, estimate = .pred_class)
conf_mat(data = results1, truth = type, estimate = .pred_class)
my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
toothed = TRUE, backbone = TRUE, breathes = TRUE, venomous = FALSE,
fins = FALSE, legs = 4, tail = TRUE, domestic = FALSE,
catsize = FALSE, type = NA)
my_animal <- my_animal %>% modify_if(is.logical, factor, levels = c(TRUE, FALSE))
my_animal
predict(tree_fit_1, new_data = my_animal)
tree_mod_of <- decision_tree(mode = "classification",
cost_complexity = 0,
min_n = 2)
tree_full <- tree_mod_of %>%
fit(type ~ ., data = Zoo)
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
pred <- predict(tree_full, new_data = Zoo)
results <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results, truth = type, estimate = .pred_class)
set.seed(123)
Zoo_split <- initial_split(Zoo, prop = 0.8, strata = type)
Zoo_train <- training(Zoo_split)
Zoo_test  <- testing(Zoo_split)
forest_mod <- rand_forest(mtry = 3, trees = 2000) %>%
set_mode("classification")
forest_fit <- forest_mod %>%
fit(type ~ ., data = Zoo_train)
pred <- predict(forest_fit, new_data = Zoo_train)
results <- Zoo_train %>% select(type) %>% bind_cols(pred)
accuracy(data = results, truth = type, estimate = .pred_class)
pred <- predict(forest_fit, new_data = Zoo_test)
results <- Zoo_test %>% select(type) %>% bind_cols(pred)
accuracy(data = results, truth = type, estimate = .pred_class)
tune_spec <-
decision_tree(
cost_complexity = tune(),
min_n = tune()
) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(),
min_n(),
levels = 5)
tree_grid
set.seed(234)
Zoo_folds <- vfold_cv(Zoo_train)
Zoo_folds
set.seed(345)
tree_wf <- workflow() %>%
add_model(tune_spec) %>%
add_formula(type ~ .)
tree_res <-
tree_wf %>%
tune_grid(
resamples = Zoo_folds,
grid = tree_grid
)
tree_res
tree_res %>%
collect_metrics()
tree_res %>%
show_best("accuracy")
best_tree <- tree_res %>%
select_best("accuracy")
best_tree
final_wf <-
tree_wf %>%
finalize_workflow(best_tree)
final_wf
final_fit <-
final_wf %>%
last_fit(Zoo_split)
final_fit |> collect_metrics()
final_tree <- extract_workflow(final_fit)
final_tree %>%
extract_fit_engine() %>%
rpart.plot(extra = 102,
roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
summary(iris)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
ree_fit_1 <- tree_mod %>%
fit(type ~ ., data = iris)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
Zoo <- as_tibble(Zoo)
head(Zoo)
Zoo <- Zoo %>%
modify_if(is.logical, factor, levels = c(TRUE, FALSE))
head(Zoo)
summary(Zoo)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
summary(iris)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
ree_fit_1 <- tree_mod %>%
fit(type ~ ., data = iris)
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 <- tree_mod %>%
fit(Species ~ ., data = iris)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
pred <- predict(tree_fit_1, new_data = iris)
results1 <- iris %>% select(Species) %>% bind_cols(pred)
accuracy(data = results1, truth = type, estimate = .pred_class)
accuracy(data = results1, truth = Species, estimate = .pred_class)
my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
toothed = TRUE, backbone = TRUE, breathes = TRUE, venomous = FALSE,
fins = FALSE, legs = 4, tail = TRUE, domestic = FALSE,
catsize = FALSE, type = NA)
tree_full <- tree_mod_of %>%
fit(type ~ ., data = Zoo)
conf_mat(data = results1, truth = Species, estimate = .pred_class)
tree_mod_of <- decision_tree(mode = "classification",
cost_complexity = 0,
min_n = 2)
tree_full <- tree_mod_of %>%
fit(Species ~ ., data = iris)
library(tidyverse)
library(tidymodels)
library(randomForest)
library(rpart.plot)
library(dials)
data(Zoo, package="mlbench")
Zoo <- as_tibble(Zoo)
head(Zoo)
Zoo <- Zoo %>%
modify_if(is.logical, factor, levels = c(TRUE, FALSE))
head(Zoo)
summary(Zoo)
tree_mod <- decision_tree(mode = "classification",
cost_complexity = 0.1,
min_n = 10)
tree_fit_1 <- tree_mod %>%
fit(type ~ ., data = Zoo)
tree_fit_1 |>
extract_fit_engine()
tree_fit_1 |>
extract_fit_engine() |>
rpart.plot(extra = 102, roundint = FALSE)
pred <- predict(tree_fit_1, new_data = Zoo)
results1 <- Zoo %>% select(type) %>% bind_cols(pred)
accuracy(data = results1, truth = type, estimate = .pred_class)
conf_mat(data = results1, truth = type, estimate = .pred_class)
my_animal <- tibble(hair = TRUE, feathers = TRUE, eggs = FALSE,
milk = TRUE, airborne = TRUE, aquatic = FALSE, predator = TRUE,
toothed = TRUE, backbone = TRUE, breathes = TRUE, venomous = FALSE,
fins = FALSE, legs = 4, tail = TRUE, domestic = FALSE,
catsize = FALSE, type = NA)
my_animal <- my_animal %>% modify_if(is.logical, factor, levels = c(TRUE, FALSE))
my_animal
predict(tree_fit_1, new_data = my_animal)
tree_mod_of <- decision_tree(mode = "classification",
cost_complexity = 0,
min_n = 2)
tree_full <- tree_mod_of %>%
fit(type ~ ., data = Zoo)
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
tree_full <- tree_mod_of %>%
fit(Species ~ ., data = iris)
tree_full |>
extract_fit_engine() |>
rpart.plot(extra = 2, roundint = FALSE,
box.palette = list("Gy", "Gn", "Bu", "Bn", "Or", "Rd", "Pu"))
#| message: false
#| warning: false
library(tidyverse)
library(tidymodels)
# zum Plotten der Korrelationsmatrix
library(corrplot)
aq <- airquality
aq <- aq |> drop_na()
cor(aq)
corrplot(cor(aq), method = "ellipse")
#| message: false
aq %>%
ggplot() +
aes(x = Temp, y = Ozone) +
geom_point() + geom_smooth(method=lm)
# Modell initialisieren
lm_model <- linear_reg() |> set_engine("lm")
# Modell trainieren ("fitten")
lm_fit <- lm_model |> fit(Ozone ~ Temp, data = aq)
summary <- lm_fit |> extract_fit_engine() |> summary()
summary
